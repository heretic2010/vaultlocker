Created by Sergey Kalinin, last modified on May 20, 2025
This article describes an approach to encrypting the data on separate Linux drives while storing keys in external location - Hashicorp Vault.  

This approach will comply the PMI ITPF since encryption keys are kept separately from encrypted containers. The container itself could be used as a Database device with low affect to performance. 

Standard Linux encryption layer is used (LUKS- Linux Unified Key Setup). LUKS is implemented through the Linux component dm_crypt to provide a transparent block device encryption in Linux kernel versions 2.6 and later.

Also vaultlocker (part of the Openstack solution) is used to provide additional automation while generating and storing crypto keys in Hashicorp Vault.

With approach below, the crypto container will be decrypted automatically during Linux operating system starts (no any manual action is required).

General Scheme
draw.io evaluation version
User / Admin
Generate/Store/Retrive
Encrypt Keys
Generate/Store/Retrive
Encrypt Keys
Hashicorp Vault
HA Cluster
KV Secrets' store
Access Policy 
Secret ID
Encrypted Disk/Container
Vault encryption key
Encrypted Disk /Container
Vault encryption key
Linux VM
Linux VM

Pre-requirements
Hashicorp Vault must be installed and the access policy must be configured accordingly.

The KV store exists in Vault and user must have a token to access this store.

Vault must be accessible over the network at the time the operating system starts.

Vault must be unsealed before any operation

Prepare the Vault:
Install Hashicorp Vault client on the host where we will encrypt the data. This is not required if we run following operations directly on Vault server.

ubuntu@cryptvm:~$ sudo snap install vault
ubuntu@cryptvm:~$ vault --version
Vault v1.15.5 (cgo)
Set up a Vault Server destination, access token and check if Vault is accessible and unsealed. 

ubuntu@cryptvm:~$ export VAULT_ADDR=http://10.145.47.159:8200
ubuntu@cryptvm:~$ export VAULT_TOKEN="hvs.trRWoavpW7wgf6V64y7IEo4B"
ubuntu@cryptvm:~$ vault status
Key                     Value
---                     -----
Seal Type               shamir
Initialized             true
Sealed                  false
Total Shares            5
Threshold               3
Version                 1.15.5
Build Date              2024-01-26T14:53:40Z
Storage Type            raft
Cluster Name            vault-cluster-65c209dc
Cluster ID              5313175f-7ae9-8fc6-502e-8b8d0c477ca4
HA Enabled              true
HA Cluster              https://10.145.47.159:8201
HA Mode                 active
Active Since            2024-02-18T16:54:09.230636694Z
Raft Committed Index    1291
Raft Applied Index      1291
Create an backend access policy and write it to Vault:

ubuntu@cryptvm:~$ vi vault-policy.hcl
path "/vaultlocker/*" {
    capabilities = ["create", "read", "update", "delete", "list"]
}
 
ubuntu@cryptvm:~$ vault policy write vaultlocker vault-policy.hcl
Create a secret Key-Value backend where keys will be stored. Please note that KV Store Version 1 is used by default. KV Version 2 requires additional investigation.

ubuntu@cryptvm:~$ vault secrets enable -path=vaultlocker/ kv
Create an approle and assign policy to this for this role.  We also restrict the number of clients who can use this role for creating entries in KV Store.

vault auth enable approle

vault write auth/approle/role/vaultlocker \
  secret_id_ttl=100m \
  token_ttl=200m \
  token_max_ttl=300m \
  policies="default"
vault write auth/approle/role/vaultlocker bound_cidr_list=192.168.0.7/24 token_bound_cidrs=192.168.0.7/24 policies=vaultlocker
ubuntu@cryptvm:~$ vault write auth/approle/role/vaultlocker bound_cidr_list=10.145.46.0/23 token_bound_cidrs=10.145.46.0/23 policies=vaultlocker
Retrieve approle ID and Secret ID that will be used for storing encryption keys. Note: the role vaultlocker must be created at the vault preparation step:

ubuntu@hashicorp:~$ vault read auth/approle/role/vaultlocker/role-id
Key        Value
---        -----
role_id    244d9a76-db41-5f55-b2f8-1feae81963a5
 
ubuntu@hashicorp:~$ vault write -force auth/approle/role/vaultlocker/secret-id
Key                   Value
---                   -----
secret_id             3fca2df4-aab4-7275-6c4e-f930de9d8fa4
secret_id_accessor    dfb5d321-47b7-7695-3dc8-a97b8ed7c58f
secret_id_num_uses    0
secret_id_ttl         0s
Encrypt the disk with Vaultlocker
Install vaultlocker tool

ubuntu@cryptvm:~$ sudo apt install vaultlocker -y
Configure Vaultlocker for disk encryption using data obtained above (see previous session):

ubuntu@cryptvm:~$ sudo vim /etc/vaultlocker/vaultlocker.conf
[vault]
url = http://10.145.47.159:8200
approle = 244d9a76-db41-5f55-b2f8-1feae81963a5
secret_id = 3fca2df4-aab4-7275-6c4e-f930de9d8fa4
backend = vaultlocker
Check information about avaliable block devices. We will use /dev/sdb for encryption container:

ubuntu@cryptvm:~$ lsblk
NAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
loop0                       7:0    0 63.9M  1 loop /snap/core20/2105
loop1                       7:1    0 63.9M  1 loop /snap/core20/2182
loop2                       7:2    0 74.2M  1 loop /snap/core22/1122
loop3                       7:3    0 79.9M  1 loop /snap/lxd/22923
loop4                       7:4    0   87M  1 loop /snap/lxd/27037
loop5                       7:5    0 40.4M  1 loop /snap/snapd/20671
loop6                       7:6    0  183M  1 loop /snap/vault/2186
sda                         8:0    0   32G  0 disk
├─sda1                      8:1    0    1M  0 part
├─sda2                      8:2    0    2G  0 part /boot
└─sda3                      8:3    0   30G  0 part
  └─ubuntu--vg-ubuntu--lv 253:0    0   15G  0 lvm  /
sdb                         8:16   0    8G  0 disk
sdc                         8:32   0   24G  0 disk
sr0                        11:0    1 1024M  0 rom
Generate the key and encrypt the disk with this key using vaultlocker. Check that crypto container is created and open/decrypted (see crypt-* device in lsblk output)

ubuntu@cryptvm:~$ sudo vaultlocker encrypt /dev/sdb
/usr/lib/python3/dist-packages/vaultlocker/shell.py:41: DeprecationWarning: Call to deprecated function 'auth_approle'. This method will be removed in version '0.12.0' Please use the 'login' method on the 'hvac.api.auth_methods.approle' class moving forward.
  client.auth_approle(config.get('vault', 'approle'),
DEBUG:urllib3.connectionpool:Starting new HTTP connection (1): 10.145.47.159:8200
DEBUG:urllib3.connectionpool:http://10.145.47.159:8200 "POST /v1/auth/approle/login HTTP/1.1" 200 595
INFO:vaultlocker.dmcrypt:LUKS formatting /dev/sdb using UUID:6f738cb1-7c09-4d20-8711-ca5dc607dbe8
INFO:vaultlocker.dmcrypt:udevadm trigger block/add for /dev/sdb
INFO:vaultlocker.dmcrypt:udevadm settle /dev/disk/by-uuid/6f738cb1-7c09-4d20-8711-ca5dc607dbe8
DEBUG:urllib3.connectionpool:http://10.145.47.159:8200 "POST /v1/vaultlocker/cryptvm/6f738cb1-7c09-4d20-8711-ca5dc607dbe8 HTTP/1.1" 204 0
DEBUG:urllib3.connectionpool:http://10.145.47.159:8200 "GET /v1/vaultlocker/cryptvm/6f738cb1-7c09-4d20-8711-ca5dc607dbe8 HTTP/1.1" 200 866
INFO:vaultlocker.dmcrypt:LUKS opening 6f738cb1-7c09-4d20-8711-ca5dc607dbe8
INFO:root:Enabling systemd unit for vaultlocker-decrypt@6f738cb1-7c09-4d20-8711-ca5dc607dbe8.service
Created symlink /etc/systemd/system/multi-user.target.wants/vaultlocker-decrypt@6f738cb1-7c09-4d20-8711-ca5dc607dbe8.service → /lib/systemd/system/vaultlocker-decrypt@.service.
 
ubuntu@cryptvm:~$ lsblk
NAME                                         MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINTS
loop0                                          7:0    0 63.9M  1 loop  /snap/core20/2105
loop1                                          7:1    0 63.9M  1 loop  /snap/core20/2182
loop2                                          7:2    0 74.2M  1 loop  /snap/core22/1122
loop3                                          7:3    0 79.9M  1 loop  /snap/lxd/22923
loop4                                          7:4    0   87M  1 loop  /snap/lxd/27037
loop5                                          7:5    0 40.4M  1 loop  /snap/snapd/20671
loop6                                          7:6    0  183M  1 loop  /snap/vault/2186
sda                                            8:0    0   32G  0 disk
├─sda1                                         8:1    0    1M  0 part
├─sda2                                         8:2    0    2G  0 part  /boot
└─sda3                                         8:3    0   30G  0 part
  └─ubuntu--vg-ubuntu--lv                    253:0    0   15G  0 lvm   /
sdb                                            8:16   0    8G  0 disk
└─crypt-6f738cb1-7c09-4d20-8711-ca5dc607dbe8 253:1    0    8G  0 crypt
sdc                                            8:32   0   24G  0 disk
sr0                                           11:0    1 1024M  0 rom
Please note that vaultlocker created an entry with device container UUID in multi-user autostart environment and linked it to autostart vaultlocker-decrypt service. So on the next system reboot, container will be open/decrypted automatically using data from vaultlocker.conf. 

Check that keys are generated and add to vault.  

ubuntu@cryptvm:~$ vault kv list vaultlocker
Keys
----
cryptvm/
ubuntu@cryptvm:~$ vault kv list vaultlocker/cryptvm
Keys
----
6f738cb1-7c09-4d20-8711-ca5dc607dbe8
ubuntu@cryptvm:~$ vault kv get vaultlocker/cryptvm/6f738cb1-7c09-4d20-8711-ca5dc607dbe8
======= Data =======
Key            Value
---            -----
dmcrypt_key    Nlbz4AvzfspQUJ5VSx5RE1oFb5lLQyW-LongLongKey..
Create file system on encrypted container and mount it to filesystem

ubuntu@cryptvm:~$ sudo mkfs.ext4 /dev/mapper/crypt-6f738cb1-7c09-4d20-8711-ca5dc607dbe8
mke2fs 1.46.5 (30-Dec-2021)
Creating filesystem with 2093056 4k blocks and 523264 inodes
Filesystem UUID: a8751dd3-3443-4a28-ae71-8115a7c66055
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632
 
Allocating group tables: done
Writing inode tables: done
Creating journal (16384 blocks):
done
Writing superblocks and filesystem accounting information: done
 
ubuntu@cryptvm:~$ sudo mount /dev/mapper/crypt-6f738cb1-7c09-4d20-8711-ca5dc607dbe8 /mnt/data
ubuntu@cryptvm:~$ ls -l /mnt/data
total 16
drwx------ 2 root root 16384 Feb 19 10:30 lost+found
All set!


export VAULT_ADDR='http://192.168.0.7:8200'
export VAULT_TOKEN='hvs.N3hHW2x2aEWiOqOTVuHdRefp'